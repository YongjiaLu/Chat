package com.lu.xmpp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lu.xmpp.bean.ChatLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_LOG".
*/
public class ChatLogDao extends AbstractDao<ChatLog, Void> {

    public static final String TABLENAME = "CHAT_LOG";

    /**
     * Properties of entity ChatLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property From = new Property(0, String.class, "from", false, "FROM");
        public final static Property To = new Property(1, String.class, "to", false, "TO");
        public final static Property Time = new Property(2, java.util.Date.class, "time", false, "TIME");
        public final static Property IsRead = new Property(3, Boolean.class, "isRead", false, "IS_READ");
        public final static Property Body = new Property(4, String.class, "body", false, "BODY");
    };


    public ChatLogDao(DaoConfig config) {
        super(config);
    }
    
    public ChatLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_LOG\" (" + //
                "\"FROM\" TEXT NOT NULL ," + // 0: from
                "\"TO\" TEXT NOT NULL ," + // 1: to
                "\"TIME\" INTEGER," + // 2: time
                "\"IS_READ\" INTEGER," + // 3: isRead
                "\"BODY\" TEXT);"); // 4: body
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_LOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatLog entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFrom());
        stmt.bindString(2, entity.getTo());
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time.getTime());
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(4, isRead ? 1L: 0L);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(5, body);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ChatLog readEntity(Cursor cursor, int offset) {
        ChatLog entity = new ChatLog( //
            cursor.getString(offset + 0), // from
            cursor.getString(offset + 1), // to
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // time
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isRead
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // body
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatLog entity, int offset) {
        entity.setFrom(cursor.getString(offset + 0));
        entity.setTo(cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setIsRead(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setBody(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ChatLog entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ChatLog entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
